
@model DTO.UserDTO
<div>
    <div class="form-group">
        <label>User Name</label>
        @Html.TextBoxFor(x => x.Username, new { @class = "form-control", @placeholder = "User Name" })
        @Html.ValidationMessageFor(x => x.Username)
    </div>
    <br />
    <div class="form-group">
        <label>Password</label>
        @Html.TextBoxFor(x => x.Password, new { @class = "form-control", @placeholder = "Password" })
        @Html.ValidationMessageFor(x => x.Password)
    </div>
    <br />
    @if(DTO.UserStatic.IsAdmin)
    { 
    <div class="form-check">
        <input type="checkbox" class="form-check-input" name="isAdmin" checked="@Model.isAdmin" value="true">
        <label class="form-check-label">is Admin?</label>
    </div>
    <br />
    }
    <div class="form-group">
        @Html.LabelFor(x => x.UserImage)
        <br />
        <input type="file" name="UserImage" accept="image/gif, image/jpeg, image/png, image/jpg" onchange="$('#UserImage')[0].src= window.URL.createObjectURL(this.files[0])" />
        <br />
        @if (Model != null && Model.Imagepath != null)
        {
            <br />
            <img src="~/Areas/Admin/Content/UserImage/@Model.Imagepath" width="300" height="200" />
        }
        else
        {
            <img src=" width=300" height="200" id="UserImage" />
        }
    </div>
    <br />
    <div class="form-group">
        <label>Name</label>
        @Html.TextBoxFor(x => x.Name, new { @class = "form-control", @placeholder = "Name" })
        @Html.ValidationMessageFor(x => x.Name)
    </div>
    <br />
    <div class="form-group">
        <label>Email</label>
        @Html.TextBoxFor(x => x.Email, new { @class = "form-control", @placeholder = "Email" })
        @Html.ValidationMessageFor(x => x.Email)
    </div>
    <br />
    <input type="number" hidden name="ID" value="@Model.ID"/>
    <div class="card-footer">
        <button class="btn btn-primary" type="submit">Save</button>
    </div>

</div>